# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Imaging Platform
# This file is distributed under the same license as the cellprofiler-tutorials package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: cellprofiler-tutorials \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-13 16:49-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/PixelClassification/PixelClassification.rst:2
msgid "CellProfiler Tutorial: pixel-based classification"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:4
msgid "By Kyle Karhohs, PhD"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:6
msgid "(A version of this document containing animated GIFs in maintained online on our `GitHub`_)"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:9
msgid "Introducing Ilastik"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:11
msgid "CellProfiler is capable of accurate and reliable segmentation of cells by utilizing a broad collection of classical image processing methods. Peruse the documentation on the `IdentifyPrimaryObjects`_ module, for example, to get a sense of these, e.g., thresholding, declumping, and watershed. However, despite the many problems CellProfiler can readily solve, certain types of images are particularly challenging. For instance, when the biologically relevant objects are defined more by texture and context than raw intensity many `classical image processing techiques`_ can be foiled; DIC images of cells are a common biological example."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:22
msgid "Thankfully, machine learning, particularly `pixel-based classification`_ has yielded powerful techniques that can often solve these challenging cases. `ilastik`_ is an open-source tool built for pixel-based classification, and, when combined with CellProfiler, the range of biology that can be quantified from images is greatly expanded beyond monocultures of monolayers to include increased complexity such as tissues, organoids, or `co-cultures`_."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:30
msgid "Now, let’s take a look at how ilastik can be used together with CellProfiler!"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:34
msgid "I. DIC conundrum"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:36
msgid "Consider segmenting DIC images, such as those within the imageset `BBBC030`_. The goal will be to identify individual Chinese Hamster Ovary (CHO) cells and the regions they occupy."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:44
msgid "A straightforward thresholding of this image yields poor results, because the cells have almost the same pixel intensity values (and sometimes even darker!) as the background. There is therefore no true foreground for these cells based solely upon an intensity histogram. Thresholding renders the CHO cells into moon-like crescents. While these fragments could be useful for simple cell counting, most metrics of morphology will be inaccurate. Now, note that there is a module, EnhanceOrSuppressFeatures, that is specifically capable of transforming DIC images into something that is readily segmented. But let's pretend for a moment we didn't have that option..."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:55
#: ../../source/PixelClassification/PixelClassification.rst:175
msgid "Open CellProfiler."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:56
msgid "Drag-and-drop a BBBC030 image into the **Images** module."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:57
msgid "Add the **Threshold** module to the pipeline. Select the image name (which should be 'DNA by default')."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:58
msgid "Run the pipeline and take note of the output."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:66
msgid "II. Pixel-based classification with ilastik"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:67
msgid "ilastik employs pixel-based classification and complements CellProfiler. The CHO cells within the DIC image are obvious to the human eye, because we can discern that each cell is defined by a characteristic combination of light and dark patterns. These same patterns can be detected with the machine-learning algorithms within ilastik."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:73
msgid "The machine-learning implemented by ilastik requires user annotation about what is background and what is a CHO cell before it can automatically make this determination across a set of images. ilastik provides a user interface for labeling, tagging, and identifying the objects of interest within an image. This annotation creates what is referred to in machine learning as a training set."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:81
msgid "Annotation with 2 Labels"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:83
msgid "Open ilastik"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:85
msgid "Start a *Pixel Classification* project."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:87
msgid "Load at least several BBBC030 images by drag-and-drop into the **Input Data** window."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:89
msgid "Now explore the image within the ilastik gui. Here are some shortcuts that may prove useful are:"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:92
msgid "*Ctrl + mouse-wheel* = zoom."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:93
msgid "The keyboard shortcut *Ctrl-D* will show the grid Ilastik uses to partition the image for processing."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:95
msgid "Zoom-in far enough that the grid is no longer visible. This will speed up the *Live Update*."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:98
msgid "Begin by labeling pixels for two classes: a background class and a CHO cell class."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:101
msgid "Open the **Feature Selction** window and add all features."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:103
msgid "Open the **Training** window."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:105
msgid "Click the **+** button of the Training window to add a label. Add two labels named *background* and *CHO*."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:108
msgid "Using the paint brush tool, label pixels (one at a time) for each class until you are satisfied with the segmentation."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:111
msgid "We recommend creating labels for each class one pixel at a time, rather than by making scribbles, to minimize the chance of `over-fitting`_, i.e. too much information about any given area can cause classification to do poorly in other slightly-dissimilar areas. To label one pixel at a time, we’ll need to zoom in far enough to resolve the individual pixels in the image. The image below shows how closely we must view individual cells before the pixels of the image become clear."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:123
msgid "Using a brush size of 1, we click a single pixel from each class: one within a single CHO cell and the other in the surrounding background. In the next image, the annotation color of the CHO cell is yellow and the annotation color of the background is green. Activating *Live Update* reveals the segmentation looks similar to the results from thresholding. This outcome is promising considering this classification was determined by 1 feature and 1 pixel each for the *CHO* and *background* labels."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:135
msgid "Adding more labels, one pixel at a time, we continue to refine the segmentation. Toggling the *Segmentation* and *Uncertainty* views provides real-time feedback that can guide the labeling process. Areas of high uncertainty will be aqua-blue, so annotating those areas will be most beneficial to training the program which pixels belong to which class. You should also view the predicted segmentation, and annotate pixels that are not currently segmented properly."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:147
msgid "Continue until it seems that additional labels do not change the results, or a subset of the pixels begin “flipping” between CHO cell and background, or until you've labeled ~20 pixels in your original region. Check and label other cells in the image, as well as in other images, to make sure the diversity in your experiment is represented in the training set."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:154
msgid "Export the probability maps"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:156
msgid "When satisfied with the results, export the probability maps."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:158
msgid "Open the **Prediction Export** window."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:159
msgid "Click the **Choose Export Settings** window."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:160
msgid "Change **Transpose to Axis Order** to ``cyx``."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:161
msgid "Change **Format** to ``tiff``."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:162
msgid "Close the export settings dialog box and click the **Export All** button."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:163
msgid "If you did not initially load all the images into ilastik and wish to create predictions for them all now, go to the **Batch Processing** window, select the remaining unpredicted images and hit **Process all files**.  This will take a couple of minutes on most computers."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:164
msgid "Note that you're producing a two channel image (Color Image)."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:168
msgid "III. Segmenting probabilities with CellProfiler"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:170
msgid "The probability map images created with ilastik can then be processed by CellProfiler to identify and measure the CHO objects within the DIC images. The probability map images are grayscale images and can be treated as if they were the result of a “stain” for the cells."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:176
msgid "Load the *pixel_based_classification.cpppipe* pipeline file."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:177
msgid "Add the exported probability images AND their matching original images to the **Images** module."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:178
msgid "In the **NamesAndTypes** module, setup the .png files as phase and the .tiff files was cho, remember to **Select the image type** as **Color Image** for .tiff files."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:179
msgid "In the **ColortoGray** module, convert just one channel (Red or Green) to Gray, you should choose red to gray if your first class in Ilastik was the cell, if your background was the first, convert just the green channel to gray and name as choSegmented."
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:180
msgid "Run the pipeline and review the segmentation.  How robustly did it perform on different images?"
msgstr ""

#: ../../source/PixelClassification/PixelClassification.rst:182
msgid "We have now transformed the patterns and texture of intensity in the DIC image into an image where the intensity reflects the likelihood that a given pixel belongs to a cell. The image below demonstrates how the IdentifyPrimaryObjects module successfully segments all the CHO cells."
msgstr ""
